from abc import ABC, abstractmethod

# هناك عدّة حلول:

# 1- تجنب توريث الخاصية:

# لا تجعل البطريق يرث مباشرة من الطيور.
# بدلاً من ذلك، قد تنظر في إنشاء واجهة (interface) تعبر عن السمات المشتركة بين الطيور وتترك خاصية الطيران خارجها.
# 2- استخدام التكوين (Composition):

# بدلاً من توريث، تستطيع استخدام التكوين لإنشاء علاقة بين البطريق وخاصية الطيران.
# إنشاء كائن يمثل القدرة على الطيران وتتكون الطيور من ذلك الكائن.
# 3- تعديل السلوك:

# كما ذكرت، تستطيع تركيب خاصية تحديد القدرة على الطيران داخل الكائن نفسه.
# من الممكن جعل تلك الخاصية خيارية، حيث باستطاعتك تمكينها أو تعطيلها اعتمادًا على حاجة البرنامج.
# والحل الأمثل هو استخدام التكوين Composition بدلاً من الوراثة.

# ففي مفهوم مبدأ الاستبدال Liskov (Liskov Substitution Principle - LSP)، يجب أن يكون من الممكن استبدال كائن من فئة مشتقة مكان كائن من الفئة الأساسية دون التأثير على صحة البرنامج، وإذا كان البطريق يرث من الطيور، يجب أن يكون بإمكانك استخدام كائن بطريق في أي مكان يتوقع أن يكون كائن طير.

# ففي حالة التكوين، البطريق سيكون كائنًا يحتوي على كائن من نوع الطائر كخاصية، وبالتالي البطريق سيرث جميع خصائص وسلوكيات الطائر، ولكن سيكون لديه أيضًا خصائص وسلوكيات خاصة به.

# ونجعل البطريق يرث خصائص الطائر التالية:

# وجود المنقار
# وجود الأجنحة
# أما خاصية الطيران، فسنجعلها خاصية للبطريق نفسه، ونستطيع أن نجعل خاصية الطيران افتراضية، بحيث يكون لها قيمة افتراضية تتمثل في عدم القدرة على الطيران، أيضًا بإمكانا بعد ذلك أن نعيد كتابة خاصية الطيران في البطريق لجعلها قادرة على الطيران.

# مثال:

class Bird:
    def __init__(self):
        self.beak = True
        self.wings = True

    def fly(self):
        print("I am flying!")

class Penguin(object):
    def __init__(self):
        super().__init__()
        self.can_fly = False

    def fly(self):
        if self.can_fly:
            super().fly()
        else:
            print("I cannot fly.")
# الكود سيولد فئة Bird بها خاصيتان، beak و wings، كما أنها تحتوي على طريقة fly() التي تطبع "I am flying!".

# الفئة Penguin هي كائن يحتوي على كائن من نوع Bird كخاصية، كما أنها تحتوي على خاصية can_fly التي تحدد ما إذا كان البطريق قادرًا على الطيران.

# طريقة fly() في Penguin تتحقق أولاً من قيمة الخاصية can_fly، وفي حال كانت True، فإنها تدعو طريقة fly() في Bird. وإلا، فإنها تطبع "I cannot fly."

# وبالتالي الكود يتبع مبدأ ليسكوف للاستبدال، وتستطيع استبدال البطريق بطائر في أي مكان في الكود، ولن يتغير السلوك.

# بالتوفيق إن شاء الله.
            
