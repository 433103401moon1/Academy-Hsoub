استعلام إنشاء جدول جديد:
CREATE TABLE Table_name(
  Column1,
  Column2,
  Column3, …)


استعلام إضافة سجل جديد إلى الجدول المحدد في الاستعلام:
INSERT INTO Table_name(Column1, Column2, Column3, …) VALUES (Value1, Value2, Value3, …)


استعلام جلب كل السجلات بكل الحقول من الجدول المحدد في الاستعلام:
SELECT * FROM Table_name
استعلام جلب كل السجلات بحقول محددة من الجدول المحدد في الاستعلام:
SELECT Column1, Column2, Column3, … FROM Table_name



------------------------------06. الجمل الشرطية WHERE و LIMIT---------------------------------------
استعلام جلب السجلات من الجدول المحدد ضمن الاستعلام الموافقة لشرط محدد:
SELECT * FROM Table_name WHERE Column = Value
تُحدد التعليمة `LIMIT` عدد السجلات المُراد عرضها، ونمرر لها عدد السجلات المطلوبة، أو عددين يُعبّر الأول عن ترتيب أول سجل سيبدأ عنده العرض، والثاني يُعبّر عن عدد السجلات المطلوب إظهارها، وبينهما فاصلة `,`، وتستخدم في آخر الاستعلام.
استعلام تحديد عدد السجلات ضمن النتيجة:
SELECT * FROM Table_name LIMIT Results_count
استعلام تحديد عدد السجلات ضمن النتيجة وتجاوز عدد منها:
SELECT * FROM Table_name LIMIT Offset_count, Results_count



استعلام عن السجلات التي تحقق الشرطين معًا:
SELECT * FROM Table_name WHERE Column1 = Value AND Column2 >= Value
يربط المعامل `OR` شرطين معًا، ويتحقق في حال كان أحد الشرطين فقط صحيحًا.
استعلام عن السجلات التي تحقق أحد الشرطين:
SELECT * FROM Table_name WHERE Column1 = Value OR Column2 >= Value



--------------09. العوامل المنطقية Logical Operators: العوامل LIKE و IN و NOT--------------------------
يُحدد المعامل `LIKE` نمط معين للسلسلة النصية، ويوضع بعد اسم العمود في جملة `WHERE`، يُستخدم معه الرمز `%` ويعني أي سلسلة نصية مهما كان طولها، والرمز `_` ويعني محرف وحيد.
استعلام عن السجلات التي يطابق قيمة حقلها نمطًا معينًا:
SELECT * FROM Table_name WHERE Column Like "_H_%"
يُحدد المعامل `IN` عدة قيم يمكن للحقل أن يطابق إحداها ليتحقق الشرط، وتوضع تلك القيم ضمن أقواس مدورة `()`، وداخلها القيم يفصل بينها فاصلة `,`.
استعلام عن السجلات التي قيمة حقلها ضمن أحد القيم المحددة:
SELECT * FROM Table_name WHERE Column IN (Value1, Value2, Value3, …)
ينفي المعامل `NOT` الشرط الذي بعده.
استعلام عن السجلات التي قيمة حقلها ليس ضمن أحد القيم المحددة:
SELECT * FROM Table_name WHERE Column NOT IN (Value1, Value2, Value3, …)



-------------10. العوامل المنطقية Logical Operators: العوامل BETWEEN و Is Null-------------------------
يُحدد العامل `BETWEEN` مجالي البداية والنهاية للقيم، وبينهما نضع العامل `AND`.
استعلام عن السجلات التي قيمة حقلها يقع في المجال بين قيمتين:
SELECT * FROM Table_name WHERE Column BETWEEN Start_value AND End_value
يُحدد العامل `IS NULL` الحقول الخالية من القيم.
استعلام عن السجلات التي قيمة حقلها فارغة:
SELECT * FROM Table_name WHERE Column IS NULL
استعلام عن السجلات التي قيمة حقلها ليست فارغة:
SELECT * FROM Table_name WHERE Column IS NOT NULL


-----------------------11. ترتيب النتائج ORDER BY------------------------------------------
تُرتب عبارة `ORDER BY` النتائج في عبارة `SELECT` وفق عمود من الجدول أو أكثر، حيث تكتب في النهاية وبعدها أسماء الحقول أو رقم ترتيبها مفصول بينها بفاصلة `,`، وتستخدم بعدها اختياريًا الكلمة المفتاحية `ASC` للترتيب تصاعديًا أو الكلمة `DESC` للترتيب التنازليًا، وفي حال لم يحدد الترتيب سيتم الترتيب تصاعديًا.
استعلام عن جميع السجلات، وترتيبها حسب قيمة حقل تصاعديًا:
SELECT * FROM Table_name ORDER BY Column ASC
استعلام عن جميع السجلات، وترتيبها حسب قيمة حقلين تنازليًا:
SELECT * FROM Table_name ORDER BY Column1,Column2 DESC
استعلام عن جميع السجلات، وترتيبها حسب قيمة أول وثالث حقل تصاعديًا:
SELECT Column1,Column2,Column3,...  FROM Table_name ORDER BY 1,3 DESC



--------------------------12. تعديل البيانات UPDATE---------------------------------------------
تُحدِّث التعليمة `UPDATE` قيم البيانات ضمن الجدول، نمرر له اسم الجدول، ثم `SET` وأسماء الأعمدة والقيم الجديدة لها، ثم شرط `WHERE` لتحديد السجلات التي ستُحدَّث.
استعلام لتحديث قيم الحقول لجميع السجلات التي تطابق الشرط:
UPDATE Table_name SET Column1 = Value, Column2 = Value, …
WHERE Column3 = Value
تنفيذ استعلام التحديث بدون الشرط `WHERE` سيُطبق التحديث على كل السجلات في الجدول.
استعلام لتحديث قيم الحقول لجميع السجلات:
UPDATE Table_name SET Column1 = Value, Column2 = Value, …



----------------------------13. حذف البيانات DELETE-------------------------------------------
تحذف التعليمة `DELETE` السجلات من الجدول، فنمرر لها اسم الجدول ثم الشرط `WHERE` لحصر السجلات المُراد حذفها.
استعلام لحذف السجلات من الجدول التي تطابق الشرط:
DELETE * FROM Table_name WHERE Column = Value
استعلام لحذف كل السجلات من الجدول:
DELETE * FROM Table_name
أو
DELETE FROM Table_name


----------------------01. الدوال التجميعية Aggregate Functions: الدالة COUNT و SUM--------------------
استعلام عن عدد السجلات في الجدول وعدد القيم الموجودة ضمن أحد الحقول:
SELECT COUNT(*), COUNT(Column) FROM Table_name

تجمع الدالة `SUM` القيم ضمن الحقل مع بعضها، نمرر لها بين قوسين مدورين `()` اسم الحقل المطلوب جمع قيمه.
استعلام عن المجموع الكلي لحقل ما للسجلات ضمن الجدول:
SELECT SUM(Column) FROM Table_name



-----------------------02. الدوال التجميعية Aggregate Functions: الدالة MIN و MAX---------------------
استعلام جميع حقول السجل الذي يملك أكبر قيمة لحقل محدد من بين سجلات الجدول، وذلك وفق شرط ما:
SELECT * FROM Table_name
WHERE Column1 = (SELECT MAX(Column1) FROM Table_name WHERE Column2 = Value)
تعيد الدالة `MIN` أصغر قيمة للحقل المحدد ضمن السجلات في النتيجة، حيث نمرر لها اسم الحقل بين قوسين مدورين `()`.
استعلام عن أصغر قيمة للحقل المحدد ضمن سجلات الجدول المحدد ضمن الاستعلام:
SELECT MIN(Column) FROM Table_name



---------------------03. الدوال التجميعية Aggregate Functions: الدالة AVG-------------------------
استعلام عن المتوسط الحسابي لقيمة حقل ضمن السجلات المطابقة لشرط ما من الجدول:
SELECT AVG(Column1) FROM Table_name WHERE Column2 = Value



------------------------04. عبارة التجميع GROUP BY-------------------------------
استعلام عن عدد السجلات بعد فرزها ضمن مجموعتين فرعيتين:
SELECT Column1, Column2, COUNT(*) FROM Table_name
GROUP BY Column1, Column2
استعلام عن عدد السجلات ضمن مجموعات على حدى، التي تطابق شرطًا محددًا:
SELECT Column1, COUNT(*) FROM Table_name
WHERE Column2 = Value
GROUP BY Column1
تعيد الكلمة المفتاحية `AS` تسمية حقل ما ضمن النتيجة، حيث نضيفها بعد اسم الحقل، وبعدها نمرر الاسم الجديد للحقل.
استعلام عن عدد السجلات ضمن الجدول، مع تغيير اسم حقل المجموع في النتيجة إلى اسم جديد:
SELECT COUNT(*) AS Name FROM Table_name



----------------------------------05. العبارة HAVING-------------------------------------
تحدد العبارة `HAVING` شرط للسجلات في نتيجة الاستعلام داخل المجموعات، وذلك عند استخدام عبارة `GROUP BY`، حيث لا يمكننا استخدام `WHERE` لتحديد الشروط ضمن المجموعات.
استعلام عن سجلات من الجدول وتحديد شرط داخل المجموعات التي تُنشئها عبارة `GROUP BY`:
SELECT Column1, COUNT(*) FROM Table_name
GROUP BY Column1
HAVING Column2 = Value



--------------------------------06. العبارة DISTINCT---------------------------------
تجلب العبارة `DISTINCT` قيم متمايزة غير متكررة من الحقل محدد.
استعلام عن القيم المميزة لحقل ما من السجلات التي تطابق شرطًا محددًا للجدول:
SELECT DISTINCT Column1 FROM Table_name
WHERE Column2 = Value
يمكن استخدام عبارة `DISTINCT` داخل دوال التجميع مثل `COUNT` لتطبيق دالة التجميع على القيم المميزة فقط للحقل، بدلًا من جميع السجلات في النتيجة، الاستعلام التالي لمعرفة عدد القيم المميزة للحقل المحدد:
SELECT COUNT(DISTINCT Column) FROM Table_name



------------------------02. إنشاء الجداول وتحديد الأعمدة الخاصة بالمفاتيح الأولية والثانوية------------------------
تحدد التعليمة `NOT NULL` قيمة الحقل بأنها ضرورية، ولا يمكن تعيين قيمة فارغة له.
تحدد التعليمة `PRIMARY KEY` الحقل على أنه مفتاح أولي.
تشير التعليمة `AUTOINCREMENT` لبرنامج إدارة قاعدة البيانات أن يقوم هو بتعيين قيم تلقائية للحقل، وذلك عبر رقم تتزايد قيمته بمقدار واحد لكل سجل جديد.
تحدد التعليمة `FOREIGN KEY` حقل المفتاح الثانوي من الجدول، حيث نمرر بعدها اسم الحقل بين قوسين مدورين `()`، وبعدها كلمة `REFERENCES`، ثم اسم الجدول، متبوعًا باسم حقل المفتاح الأولي بين قوسين `()` ضمن الجدول المقابل.
استعلام إنشاء جدول يحوي حقل مفتاح أولي، وحقل مفتاح ثانوي للربط مع جدول مقابل:
CREATE TABLE1 Table_name (
  ColumnPK INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,
  ColumnFK INTEGER,
  FOREIGN KEY (ColumnFK) REFERENCES TABLE2 (ColumnPK)
)
عند إضافة بيانات للجداول المربوطة يجب أولًا إضافة البيانات للجدول الأب، ثم إضافة البيانات في الجدول المربوط معه.



-----------------------------05. الربط الداخلي INNER JOIN-----------------------------------
يحدد الربط الدخلي `INNER JOIN`.السجلات المرتبطة فقط بين الجدولين.
استعلام ربط داخلي بين جدولين:
SELECT * FROM Table1
INNER JOIN TABLE2 ON TABLE1. Column = TABLE2.Column



----------------06. الربط اليساري LEFT JOIN والربط اليميني RIGHT JOIN والربط الخارجي الكامل FULL OUTER JOIN------------
يحدد الربط اليساري `LEFT JOIN` سجلات الجدول الأيسر جميعها، إضافة إلى السجلات المرتبطة معها من الجدول الأيمن.
يحدد الربط اليميني `RIGHT JOIN` سجلات الجدول الأيمن جميعها، إضافة إلى السجلات المرتبطة معها من الجدول الأيسر.
يحدد الربط التام `FULL OUTER JOIN` جميع السجلات من الجدولين المرتبطة وغير المرتبطة.
الجدول اليساري هو الجدول بعد كلمة `FROM`، والجدول اليميني هو الجدول بعد كلمة `JOIN`.
استعلام ربط يساري بين جدولين:
SELECT * FROM Table1
LEFT JOIN TABLE2 ON TABLE1. Column = TABLE2.Column
استعلام ربط يميني بين جدولين [غير مدعوم في SQLite]:
SELECT * FROM Table1
RIGHT JOIN TABLE2 ON TABLE1. Column = TABLE2.Column
استعلام ربط تام بين جدولين [غير مدعوم في SQLite]:
SELECT * FROM Table1
FULL OUTER JOIN TABLE2 ON TABLE1. Column = TABLE2.Column



-------------------------------07. عامل الضم UNION--------------------------------------
يضم العامل `UNION` نتائج الاستعلامات مع بعضها في نتيجة واحدة.

استعلام ضم نتيجتي استعلامين مختلفين معًا:
SELECT * FROM Table
UNION




------------------------------08. الاستعلام عن البيانات عن طريق الاستعلامات الفرعية Sub-queries--------------------
يمكن تنفيذ استعلام فرعي ضمن قوسين مدورين `()`، واستخدام نتيجته ضمن استعلام آخر.

استخدام استعلام فرعي كحقل ضمن استعلام آخر:
 
SELECT Column1, (SELECT COUNT(*) FROM Table2) AS Name
FROM TABLE1
استخدام قيمة استعلام فرعي ضمن شرط استعلام من جدول:
SELECT * FROM TABLE1
WHERE Column IN (SELECT Column FROM Table2)
SELECT * FROM Table




----------------------------09. إضافة وتعديل البيانات عن طريق الاستعلامات الفرعية Sub-queries------------------------
يمكن استخدام السجلات في نتيجة استعلام فرعي لإدراجها ضمن جدول باستخدام `INSERT INTO`، ويجب مراعاة أن تكون أنواع تلك الأعمدة متطابقة، وأن لا تخالف أي من شروط القيم مثل تكرار مفتاح أولي.
استعلام إدراج السجلات في نتيجة استعلام فرعي إلى جدول آخر:
INSERT INTO Table1
SELECT * FROM Table2
استعلام إدراج حقول معينة من استعلام فرعي إلى جدول آخر:
INSERT INTO Table1 (Column1, Column2, …)
SELECT (Column1, Column2, …) FROM Table2
يمكن استخدام نتيجة استعلام فرعي لحساب قيمة خلال عملية تحديث بيانات جدول.
استعلام تحديث قيم جدول بالاعتماد على نتيجة استعلام فرعي:
UPDATE Table1 SET Column = (SELECT MAX(Column) FROM Table2)


-------------------------------------01. ما هي Node.js وتهيئة بيئة العمل-------------------------------
https://academy.hsoub.com/courses/computer-science/databases/nodejs-with-databases/01-%D9%85%D8%A7-%D9%87%D9%8A-nodejs-%D9%88%D8%AA%D9%87%D9%8A%D8%A6%D8%A9-%D8%A8%D9%8A%D8%A6%D8%A9-%D8%A7%D9%84%D8%B9%D9%85%D9%84-r2541/
للتأكد من تثبيث Node.js ننفذ الأمر:
node -v 
يجب أن يظهر لنا رقم الإصدار المثبت.
صفحة تنزيل SQLite.
للتأكد من تثبيث SQLite ننفذ الأمر:
sqlite3
